// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider               = "prisma-class-generator"
  dryRun                 = "false"
  separateRelationFields = "false"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// backend/prisma/schema.prisma

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  bio            String?
  name           String?
  email          String?   @unique
  image          String?
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?   @map("hashed_password")

  courses           Course[]
  accounts          Account[]
  sessions          Session[]
  courseReviews     CourseReview[]
  courseComments    CourseComment[]
  courseQuestions   CourseQuestion[]
  courseFavorites   CourseFavorite[]
  lectureActivities LectureActivity[]
  courseEnrollments CourseEnrollment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 강의 테이블
model Course {
  id               String  @id @default(uuid())
  slug             String  @unique
  title            String
  price            Int     @default(0)
  level            String  @default("BEGINNER")
  status           String  @default("DRAFT")
  description      String? @map("description")
  instructorId     String  @map("instructor_id")
  thumbnailUrl     String? @map("thumbnail_url")
  discountPrice    Int?    @map("discount_price")
  shortDescription String? @map("short_descrpition")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  sections          Section[]
  lectures          Lecture[]
  reviews           CourseReview[]
  favorites         CourseFavorite[]
  questions         CourseQuestion[]
  categories        CourseCategory[]
  lectureActivities LectureActivity[]
  enrollments       CourseEnrollment[]

  instructor User @relation(fields: [instructorId], references: [id])

  @@map("courses")
}

// 강의 섹션 테이블
model Section {
  id          String  @id @default(uuid())
  order       Int
  title       String
  description String?
  courseId    String  @map("course_id")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  lectures Lecture[]

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("sections")
}

// 세부 강의 테이블
model Lecture {
  id               String  @id @default(uuid())
  order            Int
  title            String
  duration         Int?
  description      String?
  courseId         String  @map("course_id")
  sectionId        String  @map("section_id")
  isPreview        Boolean @default(false) @map("is_preview")
  videoStorageInfo Json?   @map("video_storage_info")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  activities LectureActivity[]

  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("lectures")
}

// 4개까지 강의 카테고리 가능
model CourseCategory {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String?

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  course Course[]

  @@map("course_categories")
}

// 강의 등록 테이블
model CourseEnrollment {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  courseId   String   @map("course_id")
  enrolledAt DateTime @default(now()) @map("enrolled_at")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

// 강의 후기 테이블
model CourseReview {
  id              String  @id @default(uuid())
  content         String
  rating          Int
  userId          String  @map("user_id")
  courseId        String  @map("course_id")
  instructorReply String? @map("instructor_reply")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_reviews")
}

// 강의 질문 테이블
model CourseQuestion {
  id       String @id @default(uuid())
  title    String
  content  String
  userId   String @map("user_id")
  courseId String @map("course_id")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  comments CourseComment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_questions")
}

// 강의 답변 테이블
model CourseComment {
  id         String @id @default(uuid())
  content    String
  userId     String @map("user_id")
  questionId String @map("question_id")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  question CourseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("course_comments")
}

// 마지막 시청 시점
model LectureActivity {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  courseId      String   @map("course_id")
  lectureId     String   @map("lecture_id")
  progress      Int      @default(0)
  duration      Int      @default(0)
  isCompleted   Boolean  @default(false) @map("is_completed")
  lastWatchedAt DateTime @default(now()) @map("last_watched_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, lectureId])
  @@map("lecture_activities")
}

// 즐겨찾기
model CourseFavorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_favorites")
}
